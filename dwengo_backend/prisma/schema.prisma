datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// Enums: aanpassing besproken: minder 1-1-relaties

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum JoinRequestStatus {
  PENDING
  APPROVED
  DENIED
}

enum EvaluationType {
  OPEN
  MULTIPLE
}

/// Gebruiker – enkele tabel met rol (aangepast)

model User {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String   @unique
  password  String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  admin   Admin?
  teacher Teacher?
  student Student?
}

model Admin {
  userId Int  @id
  user   User @relation(fields: [userId], references: [id])
}

model Teacher {
  userId Int  @id
  user   User @relation(fields: [userId], references: [id])

  // Antwoorden en feedback
  teacherFeedbacks Feedback[]
  teacherAnswers   Answer[]
  // Uitnodigingen om een klas mee te beheren
  invite           Invite[]

  // Door deze gebruiker (als teacher) aangemaakte leerpaden en leerobjecten
  createdLearningPaths   LearningPath[]   @relation("LearningPathCreator")
  createdLearningObjects LearningObject[] @relation("LearningObjectCreator")

  teaches ClassTeacher[]

  // Een leerkracht kan deel uitmaken van meerdere conversaties
  // Dit is een impliciete many-to-many relatie
  // Zie: https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/many-to-many-relations?utm_source=docs&utm_medium=sidebar-promo&utm_campaign=faster-db-queries#implicit-many-to-many-relations
  conversations Conversation[]
}

model Student {
  userId Int  @id
  user   User @relation(fields: [userId], references: [id])

  // Voortgang van studenten
  progress StudentProgress[]

  // Verzoeken om lid te worden van een klas
  joinRequests JoinRequest[]

  // Relaties naar klassen (veel-op-veel)
  classes ClassStudent[]

  // Teams waarvan de student lid is
  Team Team[]

  // Een student kan vragen stellen
  questions Question[]
}

model Class {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  classLinks   ClassStudent[]
  joinRequests JoinRequest[]
  assignments  ClassAssignment[]
  Invite       Invite[]
  ClassTeacher ClassTeacher[]
}

///
/// Tussentabel om een Student aan een Class te koppelen
///
model ClassStudent {
  studentId Int
  classId   Int

  student Student @relation(fields: [studentId], references: [userId])
  class   Class   @relation(fields: [classId], references: [id])

  @@id([studentId, classId])
}

///
/// Tussentabel om een Teacher aan een Class te koppelen
///
model ClassTeacher {
  teacherId Int
  classId   Int

  teacher Teacher @relation(fields: [teacherId], references: [userId])
  class   Class   @relation(fields: [classId], references: [id])

  @@id([teacherId, classId])
}

///
/// JoinRequest – voor verzoeken om een klas te joinen

model JoinRequest {
  studentId Int
  classId   Int
  status    JoinRequestStatus

  student Student @relation(fields: [studentId], references: [userId])
  class   Class   @relation(fields: [classId], references: [id])

  @@id([studentId, classId])
}

model Invite {
  teacherId Int
  classId   Int
  status    JoinRequestStatus

  teacher Teacher @relation(fields: [teacherId], references: [userId])
  class   Class   @relation(fields: [classId], references: [id])

  @@id([teacherId, classId])
}

model LearningPath {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  language    String
  description String
  image       String?
  minItems    Int?
  nodes       Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  creatorId Int
  creator   Teacher @relation(fields: [creatorId], references: [userId], name: "LearningPathCreator")

  assignments          Assignment[]
  learningPathNodes    LearningPathNode[]
  // Bij een leerpad kunnen er meerdere conversaties tussen teams en leerkrachten plaatsvinden
  generalConversations GeneralConversation[]
}

model LearningPathNode {
  learningPathId Int
  nodeId         Int

  learningPath LearningPath @relation(fields: [learningPathId], references: [id])

  @@id([learningPathId, nodeId])
}

model LearningObject {
  id               String   @id
  version          String
  language         String
  title            String   @unique
  description      String
  contentType      String
  keywords         String
  targetAges       String
  teacherExclusive Boolean
  skosConcepts     String
  copyright        String?
  licence          String
  difficulty       Int
  estimatedTime    Int
  available        Boolean
  contentLocation  String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  creatorId Int
  creator   Teacher @relation(fields: [creatorId], references: [userId], name: "LearningObjectCreator")

  // Binnen een leerobject kunnen er meerdere evaluaties zitten
  evaluations           Evaluation[]
  educationalGoals      EducationalGoal[]
  returnValue           ReturnValue?
  progress              LearningObjectProgress[]
  // Bij een leerobject kunnen er meerdere conversaties tussen teams en leerkrachten plaatsvinden
  specificConversations SpecificConversation[]
}

model EducationalGoal {
  id               String  @id
  learningObjectId String
  source           String?
  goalId           String?

  learningObject LearningObject @relation(fields: [learningObjectId], references: [id])
}

model ReturnValue {
  id               Int    @id @default(autoincrement())
  learningObjectId String @unique
  callbackUrl      String
  callbackSchema   Json

  learningObject LearningObject @relation(fields: [learningObjectId], references: [id])
}

model Evaluation {
  id             String         @id
  nrOfQuestions  Int
  deadline       DateTime
  evaluationType EvaluationType

  learningObject LearningObject       @relation(fields: [id], references: [id])
  questions      EvaluationQuestion[]
  // Een evaluatie kan meerdere inzendingen hebben
  submissions    Submission[]
}

model EvaluationQuestion {
  id           Int    @id @default(autoincrement())
  evaluationId String
  questionId   Int
  question     String

  evaluation Evaluation             @relation(fields: [evaluationId], references: [id])
  // Indien de evaluatie multiple choice, kunnen hier opties gekoppeld worden.
  options    MultipleChoiceOption[]

  @@unique([evaluationId, questionId])
}

model MultipleChoiceOption {
  id                   Int     @id @default(autoincrement())
  evaluationQuestionId Int
  option               String
  isCorrect            Boolean

  evaluationQuestion EvaluationQuestion @relation(fields: [evaluationQuestionId], references: [id])
}

///
/// Vragen en antwoorden

enum ConversationType {
  // SPECIFIC representeert een conversatie, die specifieke vragen die door studenten worden gesteld, bevat
  // bij het overlopen van een leerobject (deel van een leerpad)
  SPECIFIC
  // GENERAL representeert een conversatie, die algemene vragen die door studenten worden gesteld, bevat
  // bij het doorlopen van een leerpad
  GENERAL
}

model Question {
  id          Int              @id @default(autoincrement())
  // De vraagsteller
  studentId   Int
  // De vraag zelf
  description String
  type        ConversationType
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  student Student @relation(fields: [studentId], references: [userId])

  // Een vraag is deel van 1 conversatie
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int
}

model Answer {
  id        Int      @id @default(autoincrement())
  teacherId Int
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teacher Teacher @relation(fields: [teacherId], references: [userId])

  // Een antwoord is deel van 1 conversatie
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int
}

model Conversation {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Een conversatie gebeurt tussen een team en een of meerdere teachers
  teamId    Int
  team      Team       @relation(fields: [teamId], references: [id])
  teachers  Teacher[]
  // Een conversatie bestaat uit meerdere vragen van een student
  questions Question[]
  // Een conversatie bestaat uit meerdere antwoorden van een teacher
  answers   Answer[]

  // Een conversatie heeft een soort type vragen. Op die manier kan er snel gezien worden
  // of deze conversatie bij een leerpad of een leerobject hoort
  SpecificConversation SpecificConversation?
  GeneralConversation  GeneralConversation?
}

model GeneralConversation {
  conversationId Int @unique
  learningPathId Int

  // Een GeneralConversation is een conversatie
  conversation Conversation @relation(fields: [conversationId], references: [id])
  // Er kunnen meerdere vragen over een leerobject worden gesteld
  learningPath LearningPath @relation(fields: [learningPathId], references: [id])

  @@id([conversationId, learningPathId])
}

model SpecificConversation {
  conversationId   Int    @unique
  learningObjectId String

  // Een SpecificConversation is een conversatie
  conversation   Conversation   @relation(fields: [conversationId], references: [id])
  // Er kunnen meerdere vragen over een leerobject worden gesteld
  learningObject LearningObject @relation(fields: [learningObjectId], references: [id])

  @@id([conversationId, learningObjectId])
}

///
/// Taken en indieningen
model Assignment {
  id             Int      @id @default(autoincrement())
  learningPathId Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  learningPath     LearningPath      @relation(fields: [learningPathId], references: [id])
  classAssignments ClassAssignment[]
  teamAssignments  TeamAssignment[]
}

model ClassAssignment {
  classId      Int
  assignmentId Int
  class        Class      @relation(fields: [classId], references: [id])
  assignment   Assignment @relation(fields: [assignmentId], references: [id])

  @@id([classId, assignmentId])
}

model Team {
  id       Int    @id @default(autoincrement())
  teamname String

  // Een team bestaat uit studenten
  students        Student[]
  // Een verwijzing naar de assignments van dit team
  teamAssignments TeamAssignment[]

  // De indieningen van een team
  submissions Submission[]

  // Een team kan meerdere conversaties met leerkrachten hebben
  conversations Conversation[]
}

model TeamAssignment {
  teamId       Int
  assignmentId Int

  team       Team       @relation(fields: [teamId], references: [id])
  Assignment Assignment @relation(fields: [assignmentId], references: [id])

  @@id([teamId, assignmentId])
}

model Submission {
  submissionId Int       @id @default(autoincrement())
  // Een inzending hoort bij een evaluatie
  evaluationId String
  // Een inzending is van een team
  teamId       Int
  submitted    DateTime  @default(now())
  // Er kan feedback komen op een inzending
  feedback     Feedback?

  evaluation Evaluation @relation(fields: [evaluationId], references: [id])
  team       Team       @relation(fields: [teamId], references: [id])
}

model Feedback {
  // Feedback hoort bij een inzending
  // Er kan maar 1 keer feedback gegeven worden op een inzending
  submissionId Int    @unique
  // Feedback kan gegeven worden door een teacher
  teacherId    Int
  // De feedback zelf
  description  String

  teacher    Teacher    @relation(fields: [teacherId], references: [userId])
  submission Submission @relation(fields: [submissionId], references: [submissionId])

  // Feedback wordt uniek bepaald door deze attributen
  @@id([submissionId, teacherId])
}

model LearningObjectProgress {
  id               Int     @id @default(autoincrement())
  learningObjectId String
  done             Boolean

  learningObject  LearningObject    @relation(fields: [learningObjectId], references: [id])
  studentProgress StudentProgress[]
}

model StudentProgress {
  studentId  Int
  progressId Int

  student  Student                @relation(fields: [studentId], references: [userId])
  progress LearningObjectProgress @relation(fields: [progressId], references: [id])

  @@id([studentId, progressId])
}
