openapi: 3.0.0
info:
  title: Learning Platform API
  version: "1.0"
servers:
  - url: http://localhost:5000

tags:
  - name: Question
    description: Everything about questions
  - name: Assignment
    description: Everything about assignments
  - name: Authentication
    description: Everything about authentication
  - name: Learning object
    description: Everything about learning objects
  - name: Selfmade learning object
    description: Everything about learning objects created by teachers
  - name: Learning path
    description: Everything about learning paths
  - name: Selfmade learning path
    description: Everything about learning paths created by teachers
  - name: Node
    description: Everything about learning path nodes
  - name: Class
    description: Everything about classes
  - name: Invite
    description: Everything about invitations
  - name: Join request
    description: Everything about join requests
  - name: Feedback
    description: Everything about feedback
  - name: Progress
    description: Everything about progress
  - name: Submission
    description: Everything about submissions
  - name: Team
    description: Everything about teams
  - name: Student
    description: Routes only accessible for students
  - name: Teacher
    description: Routes only accessible for teachers
  - name: User
    description: Routes accessible for all users

paths:
  /auth:
    $ref: "./routes/authentication/authenticationRoutes.yaml"
  /class:
    $ref: "./routes/class/classRoutes.yaml"
  /invite:
    $ref: "./routes/invite/inviteRoutes.yaml"
  /join-request:
    $ref: "./routes/joinRequest/joinRequestRoutes.yaml"

  # Selfmade Learning Path routes
  /pathByTeacher:
    post:
      tags:
        - Selfmade learning path
        - Teacher
      summary: Create a new learning path
      description: Allows a teacher to create a new selfmade learning path (initially without nodes). Requires teacher authentication.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PathMetadata'
      responses:
        '201':
          description: Learning path created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LearningPath'
        '401':
          description: Unauthorized access
        '400':
          description: Invalid request body

    get:
      tags:
        - Selfmade learning path
        - Teacher
      summary: Get all selfmade learning paths
      description: Retrieve all selfmade learning paths created by the authenticated teacher. Requires teacher authentication.
      responses:
        '200':
          description: Learning paths retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LearningPath'
        '401':
          description: Unauthorized access

  /pathByTeacher/{pathId}:
    get:
      tags:
        - Selfmade learning path
        - Teacher
      summary: Get a specific selfmade learning path
      description: Retrieve a specific selfmade learning path by its ID. Requires teacher authentication.
      parameters:
        - name: pathId
          in: path
          required: true
          description: The ID of the selfmade learning path
          schema:
            type: string
      responses:
        '200':
          description: Learning path retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LearningPath'
        '401':
          description: Unauthorized access
        '404':
          description: Learning path not found

    patch:
      tags:
        - Selfmade learning path
        - Teacher
      summary: Update a selfmade learning path
      description: Allows a teacher to update a specific selfmade learning path. Requires teacher authentication.
      parameters:
        - name: pathId
          in: path
          required: true
          description: The ID of the selfmade learning path
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OptionalPathMetaData'
      responses:
        '200':
          description: Learning path updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LearningPath'
        '401':
          description: Unauthorized access
        '400':
          description: Invalid request body
        '404':
          description: Learning path not found

    delete:
      tags:
        - Selfmade learning path
        - Teacher
      summary: Delete a selfmade learning path
      description: Allows a teacher to delete a specific selfmade learning path. Requires teacher authentication.
      parameters:
        - name: pathId
          in: path
          required: true
          description: The ID of the selfmade learning path
          schema:
            type: string
      responses:
        '204':
          description: Learning path deleted successfully
        '401':
          description: Unauthorized access
        '404':
          description: Learning path not found

  # Node routes
  /learningPath/{pathId}/node:
    get:
      tags:
        - Node
        - User
      summary: Get all nodes for a learning path
      description: Retrieve all nodes for a specific selfmade learning path. Accessible to any authenticated user (student or teacher).
      parameters:
        - name: pathId
          in: path
          required: true
          description: The ID of the learning path
          schema:
            type: string
      responses:
        '200':
          description: Nodes retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Node'
        '401':
          description: Unauthorized access
        '404':
          description: Learning path not found
    post:
      tags:
        - Node
        - Teacher
      summary: Create a new node for a learning path
      description: Allows a teacher to create a new node in a specific selfmade learning path. Requires teacher authentication.
      parameters:
        - name: pathId
          in: path
          required: true
          description: The ID of the learning path
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeMetadata'
      responses:
        '201':
          description: Node created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
        '401':
          description: Unauthorized access
        '400':
          description: Invalid request body

  /learningPath/{pathId}/node/{nodeId}:
    patch:
      tags:
        - Node
        - Teacher
      summary: Update a node in a learning path
      description: Allows a teacher to update a specific node in a selfmade learning path. Requires teacher authentication.
      parameters:
        - name: pathId
          in: path
          required: true
          description: The ID of the learning path
          schema:
            type: string
        - name: nodeId
          in: path
          required: true
          description: The ID of the node
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeMetadata'
      responses:
        '200':
          description: Node updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
        '401':
          description: Unauthorized access
        '400':
          description: Invalid request body
        '404':
          description: Node not found

    delete:
      tags:
        - Node
        - Teacher
      summary: Delete a node from a learning path
      description: Allows a teacher to delete a specific node from a selfmade learning path. Requires teacher authentication.
      parameters:
        - name: pathId
          in: path
          required: true
          description: The ID of the learning path
          schema:
            type: string
        - name: nodeId
          in: path
          required: true
          description: The ID of the node
          schema:
            type: string
      responses:
        '204':
          description: Node deleted successfully
        '401':
          description: Unauthorized access
        '404':
          description: Node not found

  # Selfmade Learning Object routes
  /learningObjectByTeacher:
    post:
      tags:
        - Selfmade learning object
        - Teacher
      summary: Create a new learning object
      description: Allows a teacher to create a new selfmade learning object. Requires teacher authentication.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SelfmadeLearningObject'
      responses:
        '201':
          description: Learning object created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LearningObject'
        '401':
          description: Unauthorized access
        '400':
          description: Invalid request body

    get:
      tags:
        - Selfmade learning object
        - Teacher
      summary: Get all selfmade learning objects
      description: Retrieve all selfmade learning objects created by the authenticated teacher. Requires teacher authentication.
      responses:
        '200':
          description: Learning objects retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LearningObject'
        '401':
          description: Unauthorized access

  /learningObjectByTeacher/{createdLearningObjectId}:
    get:
      tags:
        - Selfmade learning object
        - Teacher
      summary: Get a specific selfmade learning object
      description: Retrieve a specific selfmade learning object by its ID. Requires teacher authentication.
      parameters:
        - name: createdLearningObjectId
          in: path
          required: true
          description: The ID of the selfmade learning object
          schema:
            type: string
      responses:
        '200':
          description: Learning object retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Learning'
        '401':
          description: Unauthorized access
        '404':
          description: Learning object not found

    patch:
      tags:
        - Selfmade learning object
        - Teacher
      summary: Update a selfmade learning object
      description: Allows a teacher to update a specific selfmade learning object. Requires teacher authentication.
      parameters:
        - name: createdLearningObjectId
          in: path
          required: true
          description: The ID of the selfmade learning object
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SelfmadeLearningObject'
      responses:
        '200':
          description: Learning object updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LearningObject'
        '401':
          description: Unauthorized access
        '400':
          description: Invalid request body
        '404':
          description: Learning object not found

    delete:
      tags:
        - Selfmade learning object
        - Teacher
      summary: Delete a selfmade learning object
      description: Allows a teacher to delete a specific selfmade learning object. Requires teacher authentication.
      parameters:
        - name: createdLearningObjectId
          in: path
          required: true
          description: The ID of the selfmade learning object
          schema:
            type: string
      responses:
        '204':
          description: Learning object deleted successfully
        '401':
          description: Unauthorized access
        '404':
          description: Learning object not found

  # Team routes
  /team/{teamId}/members:
    get:
      tags:
        - Team
        - User
      summary: Get all team members of a specific team
      description: Retrieve all members of a specific team. Accessible to any authenticated user (student or teacher).
      parameters:
        - name: teamId
          in: path
          required: true
          description: The ID of the team
          schema:
            type: integer
      responses:
        '200':
          description: Team members retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeamMember'
        '401':
          description: Unauthorized access
        '404':
          description: Team not found

  /team/student:
    get:
      tags:
        - Team
        - Student
      summary: Get all teams of the logged-in student
      description: Retrieve all teams that the logged-in student is a member of. Requires student authentication.
      responses:
        '200':
          description: Teams retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
        '401':
          description: Unauthorized access

  /team/student/assignment/{assignmentId}/studentTeam:
    get:
      tags:
        - Team
        - Student
      summary: Get a specific team by assignment ID
      description: Retrieve the team of the logged-in student for a specific assignment. Requires student authentication.
      parameters:
        - name: assignmentId
          in: path
          required: true
          description: The ID of the assignment
          schema:
            type: integer
      responses:
        '200':
          description: Team retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '401':
          description: Unauthorized access
        '404':
          description: Team not found

  /team/teacher/class/{classId}/assignment/{assignmentId}:
    post:
      tags:
        - Team
        - Teacher
      summary: Create teams in an assignment
      description: Allows a teacher to create teams for a specific assignment in a class. Requires teacher authentication.
      parameters:
        - name: classId
          in: path
          required: true
          description: The ID of the class
          schema:
            type: integer
        - name: assignmentId
          in: path
          required: true
          description: The ID of the assignment
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Team'
      responses:
        '201':
          description: Teams created successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
        '401':
          description: Unauthorized access
        '400':
          description: Invalid request body

  /team/teacher/assignment/{assignmentId}/all:
    get:
      tags:
        - Team
        - Teacher
      summary: Get all teams in an assignment
      description: Retrieve all teams for a specific assignment. Requires teacher authentication.
      parameters:
        - name: assignmentId
          in: path
          required: true
          description: The ID of the assignment
          schema:
            type: integer
      responses:
        '200':
          description: Teams retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
        '401':
          description: Unauthorized access
        '404':
          description: Assignment not found

  /team/teacher/assignment/{assignmentId}:
    patch:
      tags:
        - Team
        - Teacher
      summary: Update teams in an assignment
      description: Allows a teacher to update teams for a specific assignment. Requires teacher authentication.
      parameters:
        - name: assignmentId
          in: path
          required: true
          description: The ID of the assignment
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Team'
      responses:
        '200':
          description: Teams updated successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
        '401':
          description: Unauthorized access
        '400':
          description: Invalid request body
        '404':
          description: Assignment not found

  /team/teacher/{teamId}/assignment/{assignmentId}:
    delete:
      tags:
        - Team
        - Teacher
      summary: Delete a team in an assignment
      description: Allows a teacher to delete a specific team in an assignment. Requires teacher authentication.
      parameters:
        - name: teamId
          in: path
          required: true
          description: The ID of the team
          schema:
            type: integer
        - name: assignmentId
          in: path
          required: true
          description: The ID of the assignment
          schema:
            type: integer
      responses:
        '204':
          description: Team deleted successfully
        '401':
          description: Unauthorized access
        '404':
          description: Team or assignment not found

  # Assignment routes
  /assignment/{assignmentId}:
    get:
      tags:
        - Assignment
        - User
      summary: Get an assignment by ID
      description: Retrieve an assignment by its ID. Access is allowed for anyone, but it should be checked if the user is a teacher of the class or a student of the class.
      parameters:
        - name: assignmentId
          in: path
          required: true
          description: The ID of the assignment
          schema:
            type: integer
      responses:
        '200':
          description: Assignment retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assignment'
        '404':
          description: Assignment not found
        '403':
          description: Unauthorized access

  /assignment/student:
    get:
      tags:
        - Assignment
        - Student
      summary: Get all assignments for a student
      description: Retrieve all assignments available for a student. Requires student authentication.
      parameters:
        - name: sort
          in: query
          required: false
          description: Sort order (asc or desc)
          schema:
            type: string
            enum: [asc, desc]
        - name: order
          in: query
          required: false
          description: Field to order by (createdAt, updatedAt, or deadline)
          schema:
            type: string
            enum: [createdAt, updatedAt, deadline]
        - name: limit
          in: query
          required: false
          description: Limit the number of assignments returned
          schema:
            type: integer
      responses:
        '200':
          description: A list of assignments for the student
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Assignment'
        '401':
          description: Unauthorized access

  /assignment/teacher:
    get:
      tags:
        - Assignment
        - Teacher
      summary: Get all assignments created by the teacher
      description: Retrieve all assignments that the teacher has created. Requires teacher authentication.
      responses:
        '200':
          description: A list of assignments created by the teacher
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Assignment'
        '401':
          description: Unauthorized access

    post:
      tags:
        - Assignment
        - Teacher
      summary: Create an assignment for a class
      description: Allows a teacher to create an assignment for a class. Requires teacher authentication.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                classId:
                  type: integer
                  description: The ID of the class
                pathRef:
                  type: string
                  description: The reference to the learning path
                pathLanguage:
                  type: string
                  description: The language of the learning path
                isExternal:
                  type: boolean
                  description: Whether the assignment is external
                deadline:
                  type: string
                  format: date-time
                  description: The deadline for the assignment
      responses:
        '201':
          description: Assignment created successfully
        '401':
          description: Unauthorized access
        '400':
          description: Invalid request body

  /assignment/teacher/class/{classId}:
    get:
      tags:
        - Assignment
        - Teacher
      summary: Get all assignments for a class
      description: Retrieve all assignments for a specific class. Requires teacher authentication.
      parameters:
        - name: classId
          in: path
          required: true
          description: The ID of the class
          schema:
            type: integer
      responses:
        '200':
          description: A list of assignments for the class
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Assignment'
        '401':
          description: Unauthorized access
        '404':
          description: Class not found

  /assignment/teacher/{assignmentId}:
    patch:
      tags:
        - Assignment
        - Teacher
      summary: Update an assignment
      description: Allows a teacher to update an assignment. Requires teacher authentication.
      parameters:
        - name: assignmentId
          in: path
          required: true
          description: The ID of the assignment
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pathRef:
                  type: string
                  description: The reference to the learning path
                pathLanguage:
                  type: string
                  description: The language of the learning path
                isExternal:
                  type: boolean
                  description: Whether the assignment is external
                deadline:
                  type: string
                  format: date-time
                  description: The deadline for the assignment
      responses:
        '200':
          description: Assignment updated successfully
        '401':
          description: Unauthorized access
        '404':
          description: Assignment not found

    delete:
      tags:
        - Assignment
        - Teacher
      summary: Delete an assignment
      description: Allows a teacher to delete an assignment. Requires teacher authentication.
      parameters:
        - name: assignmentId
          in: path
          required: true
          description: The ID of the assignment
          schema:
            type: integer
      responses:
        '204':
          description: Assignment deleted successfully
        '401':
          description: Unauthorized access
        '404':
          description: Assignment not found

  # Feedback routes
  /feedback:
    post:
      tags:
        - Feedback
        - Teacher
      summary: Create feedback for a submission
      description: Create new feedback for a specific submission. Requires teacher authentication.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                submissionId:
                  type: integer
                  description: The ID of the submission
                description:
                  type: string
                  description: The feedback description
      responses:
        "201":
          description: Feedback created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feedback"
        "401":
          description: Unauthorized access
        "400":
          description: Invalid request body

  /feedback/submission/{submissionId}:
    get:
      tags:
        - Feedback
        - Teacher
      summary: Get feedback for a submission
      description: Retrieve feedback associated with a specific submission. Requires teacher authentication.
      parameters:
        - name: submissionId
          in: path
          required: true
          description: The ID of the submission
          schema:
            type: integer
      responses:
        "200":
          description: Feedback for the submission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feedback"
        "401":
          description: Unauthorized access
        "404":
          description: Submission not found

    patch:
      tags:
        - Feedback
        - Teacher
      summary: Update feedback for a submission
      description: Update the feedback associated with a specific submission. Requires teacher authentication.
      parameters:
        - name: submissionId
          in: path
          required: true
          description: The ID of the submission
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  description: The updated feedback description
      responses:
        "200":
          description: Feedback updated successfully
        "401":
          description: Unauthorized access
        "404":
          description: Submission not found

    delete:
      tags:
        - Feedback
        - Teacher
      summary: Delete feedback for a submission
      description: Delete the feedback associated with a specific submission. Requires teacher authentication.
      parameters:
        - name: submissionId
          in: path
          required: true
          description: The ID of the submission
          schema:
            type: integer
      responses:
        "204":
          description: Feedback deleted successfully
        "401":
          description: Unauthorized access
        "404":
          description: Submission not found

  /feedback/assignment/{assignmentId}/evaluation/{evaluationId}:
    get:
      tags:
        - Feedback
        - Teacher
      summary: Get all feedback for an evaluation
      description: Retrieve all feedback associated with a specific evaluation for an assignment. Requires teacher authentication.
      parameters:
        - name: assignmentId
          in: path
          required: true
          description: The ID of the assignment
          schema:
            type: integer
        - name: evaluationId
          in: path
          required: true
          description: The ID of the evaluation
          schema:
            type: string
      responses:
        "200":
          description: A list of feedback for the evaluation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Feedback"
        "401":
          description: Unauthorized access
        "404":
          description: Evaluation not found

  # Learning Object routes
  /learningObject/{learningObjectId}:
    get:
      tags:
        - Learning object
        - User
      summary: Get a specific learning object
      description: Retrieve a specific learning object by its ID. Accessible to any authenticated user (student or teacher).
      parameters:
        - name: learningObjectId
          in: path
          required: true
          description: The ID of the learning object
          schema:
            type: string
      responses:
        '200':
          description: Learning object retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LearningObject'
        '401':
          description: Unauthorized access
        '404':
          description: Learning object not found

  /learningObject/learningPath/{pathId}:
    get:
      tags:
        - Learning object
        - User
      summary: Get all learning objects for a specific learning path
      description: Retrieve all learning objects associated with a specific learning path. Accessible to any authenticated user (student or teacher).
      parameters:
        - name: pathId
          in: path
          required: true
          description: The ID of the learning path
          schema:
            type: string
        - name: language
          in: query
          required: false
          description: The language of the learning objects
          schema:
            type: string
        - name: hruid
          in: query
          required: false
          description: The human-readable ID of the learning object
          schema:
            type: string
        - name: version
          in: query
          required: false
          description: The version of the learning object
          schema:
            type: integer
      responses:
        '200':
          description: Learning objects retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LearningObject'
        '401':
          description: Unauthorized access
        '404':
          description: Learning path not found

  /learningObject/teacher:
    get:
      tags:
        - Learning object
        - Teacher
      summary: Get all learning objects
      description: Retrieve all learning objects. Only accessible to teachers.
      responses:
        '200':
          description: Learning objects retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LearningObject'
        '401':
          description: Unauthorized access

  /learningObject/teacher/search:
    get:
      tags:
        - Learning object
        - Teacher
      summary: Search for learning objects
      description: Search for learning objects based on query parameters. Only accessible to teachers.
      parameters:
        - name: q
          in: query
          required: false
          description: The search term
          schema:
            type: string
      responses:
        '200':
          description: Learning objects retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LearningObject'
        '401':
          description: Unauthorized access

  /learningObject/teacher/lookup:
    get:
      tags:
        - Learning object
        - Teacher
      summary: Get a learning object by hruid, language, and version
      description: Retrieve a learning object by its human-readable ID, language, and version. Only accessible to teachers.
      parameters:
        - name: hruid
          in: query
          required: true
          description: The human-readable ID of the learning object
          schema:
            type: string
        - name: language
          in: query
          required: true
          description: The language of the learning object
          schema:
            type: string
        - name: version
          in: query
          required: true
          description: The version of the learning object
          schema:
            type: integer
      responses:
        '200':
          description: Learning object retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LearningObject'
        '401':
          description: Unauthorized access
        '404':
          description: Learning object not found

  # Learning Path routes  
  /learningPath:
    get:
      tags:
        - Learning path
        - User
      summary: Search for learning paths
      description: Search for learning paths based on query parameters. Accessible to any authenticated user (student or teacher).
      parameters:
        - name: language
          in: query
          required: false
          description: The language of the learning path
          schema:
            type: string
        - name: hruid
          in: query
          required: false
          description: The human-readable ID of the learning path
          schema:
            type: string
        - name: title
          in: query
          required: false
          description: The title of the learning path
          schema:
            type: string
        - name: description
          in: query
          required: false
          description: The description of the learning path
          schema:
            type: string
        - name: all
          in: query
          required: false
          description: Search across all fields
          schema:
            type: string
      responses:
        '200':
          description: Learning paths retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LearningPath'
        '401':
          description: Unauthorized access

  /learningPath/{pathId}:
    get:
      tags:
        - Learning path
        - User
      summary: Get a specific learning path
      description: Retrieve a specific learning path by its ID or human-readable ID. Accessible to any authenticated user (student or teacher).
      parameters:
        - name: pathId
          in: path
          required: true
          description: The ID or human-readable ID of the learning path
          schema:
            type: string
      responses:
        '200':
          description: Learning path retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LearningPath'
        '401':
          description: Unauthorized access
        '404':
          description: Learning path not found

  # Question routes  
  /question/{questionId}:
    get:
      tags:
        - Question
        - User
      summary: Get a specific question
      description: Allows authorized users to retrieve a specific question.
      parameters:
        - name: questionId
          in: path
          required: true
          description: The ID of the question
          schema:
            type: integer
      responses:
        "200":
          description: Question retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Question"
        "401":
          description: Unauthorized access
        "403":
          description: Forbidden access

    patch:
      tags:
        - Question
        - User
      summary: Update a question
      description: Allows authorized users to update a specific question.
      parameters:
        - name: questionId
          in: path
          required: true
          description: The ID of the question
          schema:
            type: integer
      responses:
        "200":
          description: Question updated successfully
        "401":
          description: Unauthorized access
        "403":
          description: Forbidden access

    delete:
      tags:
        - Question
        - User
      summary: Delete a question
      description: Allows authorized users to delete a specific question.
      parameters:
        - name: questionId
          in: path
          required: true
          description: The ID of the question
          schema:
            type: integer
      responses:
        "204":
          description: Question deleted successfully
        "401":
          description: Unauthorized access
        "403":
          description: Forbidden access

  /question/{questionId}/message:
    post:
      tags:
        - Question
        - User
      summary: Create a message for a question
      description: Allows authorized users to create a message for a specific question.
      parameters:
        - name: questionId
          in: path
          required: true
          description: The ID of the question
          schema:
            type: integer
      responses:
        "201":
          description: Message created successfully
        "401":
          description: Unauthorized access
        "403":
          description: Forbidden access

  /question/{questionId}/message/{questionMessageId}:
    patch:
      tags:
        - Question
        - User
      summary: Update a message for a question
      description: Allows authorized users to update a specific message for a question.
      parameters:
        - name: questionId
          in: path
          required: true
          description: The ID of the question
          schema:
            type: integer
        - name: questionMessageId
          in: path
          required: true
          description: The ID of the question message
          schema:
            type: integer
      responses:
        "200":
          description: Message updated successfully
        "401":
          description: Unauthorized access
        "403":
          description: Forbidden access

    delete:
      tags:
        - Question
        - User
      summary: Delete a message for a question
      description: Allows authorized users to delete a specific message for a question.
      parameters:
        - name: questionId
          in: path
          required: true
          description: The ID of the question
          schema:
            type: integer
        - name: questionMessageId
          in: path
          required: true
          description: The ID of the question message
          schema:
            type: integer
      responses:
        "204":
          description: Message deleted successfully
        "401":
          description: Unauthorized access
        "403":
          description: Forbidden access

  /question/{questionId}/messages:
    get:
      tags:
        - Question
        - User
      summary: Get messages for a question
      description: Allows authorized users to retrieve all messages for a specific question.
      parameters:
        - name: questionId
          in: path
          required: true
          description: The ID of the question
          schema:
            type: integer
      responses:
        "200":
          description: Messages retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/QuestionMessage"
        "401":
          description: Unauthorized access
        "403":
          description: Forbidden access

  /question/team/{teamId}/:
    get:
      tags:
        - Question
        - User
      summary: Get questions for a team
      description: Allows authorized users to retrieve all questions for a specific team.
      parameters:
        - name: teamId
          in: path
          required: true
          description: The ID of the team
          schema:
            type: integer
      responses:
        "200":
          description: Questions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Question"
        "401":
          description: Unauthorized access
        "403":
          description: Forbidden access

  /question/class/{classId}:
    get:
      tags:
        - Question
        - User
      summary: Get questions for a class
      description: Allows authorized users to retrieve all questions for a specific class.
      parameters:
        - name: classId
          in: path
          required: true
          description: The ID of the class
          schema:
            type: integer
      responses:
        "200":
          description: Questions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Question"
        "401":
          description: Unauthorized access
        "403":
          description: Forbidden access

  /question/assignment/{assignmentId}/class/{classId}:
    get:
      tags:
        - Question
        - User
      summary: Get questions for an assignment in a class
      description: Allows authorized users to retrieve all questions for a specific assignment in a class.
      parameters:
        - name: assignmentId
          in: path
          required: true
          description: The ID of the assignment
          schema:
            type: integer
        - name: classId
          in: path
          required: true
          description: The ID of the class
          schema:
            type: integer
      responses:
        "200":
          description: Questions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Question"
        "401":
          description: Unauthorized access
        "403":
          description: Forbidden access

  /question/assignment/{assignmentId}/learningPath/{learningPathId}/:
    post:
      tags:
        - Question
        - User
      summary: Create a general question for an assignment
      description: Allows a student in a team with an assignment to create a general question.
      parameters:
        - name: assignmentId
          in: path
          required: true
          description: The ID of the assignment
          schema:
            type: integer
        - name: learningPathId
          in: path
          required: true
          description: The ID of the learning path
          schema:
            type: integer
      responses:
        "201":
          description: Question created successfully
        "401":
          description: Unauthorized access
        "403":
          description: Forbidden access

  /question/assignment/{assignmentId}/learningPath/{learningPathId}/learningObject/{learningObjectId}/:
    post:
      tags:
        - Question
        - User
      summary: Create a specific question for a learning object
      description: Allows a student in a team with an assignment to create a specific question for a learning object.
      parameters:
        - name: assignmentId
          in: path
          required: true
          description: The ID of the assignment
          schema:
            type: integer
        - name: learningPathId
          in: path
          required: true
          description: The ID of the learning path
          schema:
            type: integer
        - name: learningObjectId
          in: path
          required: true
          description: The ID of the learning object
          schema:
            type: integer
      responses:
        "201":
          description: Question created successfully
        "401":
          description: Unauthorized access
        "403":
          description: Forbidden access

  # Progress routes
  /progress/student/learningObject/{learningObjectId}:
    post:
      tags:
        - Progress
        - Student
      summary: Create progress for a learning object
      description: Create a new progress entry for a student when they start a learning object. Requires student authentication.
      parameters:
        - name: learningObjectId
          in: path
          required: true
          description: The ID of the learning object
          schema:
            type: string
      responses:
        '201':
          description: Progress created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LearningObjectProgress'
        '401':
          description: Unauthorized access

    get:
      tags:
        - Progress
        - Student
      summary: Get progress for a learning object
      description: Retrieve the current progress of a student for a specific learning object. Requires student authentication.
      parameters:
        - name: learningObjectId
          in: path
          required: true
          description: The ID of the learning object
          schema:
            type: string
      responses:
        '200':
          description: Progress retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentProgress'
        '401':
          description: Unauthorized access
        '404':
          description: Learning object not found

    patch:
      tags:
        - Progress
        - Student
      summary: Update progress for a learning object
      description: Update the progress of a student for a specific learning object (e.g., mark it as completed). Requires student authentication.
      parameters:
        - name: learningObjectId
          in: path
          required: true
          description: The ID of the learning object
          schema:
            type: string
      responses:
        '200':
          description: Progress updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LearningObjectProgress'
        '401':
          description: Unauthorized access
        '404':
          description: Learning object not found

  /progress/student/team/{teamId}:
    get:
      tags:
        - Progress
        - Student
      summary: Get team progress for a student
      description: Retrieve the progress of a team for a specific assignment. Requires student authentication.
      parameters:
        - name: teamId
          in: path
          required: true
          description: The ID of the team
          schema:
            type: integer
      responses:
        '200':
          description: Team progress retrieved successfully
          content:
            application/json:
              schema:
                type: number
                min: 0
                max: 100
        '401':
          description: Unauthorized access
        '404':
          description: Team not found

  /progress/student/assignment/{assignmentId}:
    get:
      tags:
        - Progress
        - Student
      summary: Get student progress for an assignment
      description: Retrieve the progress of a student for a specific assignment. Requires student authentication.
      parameters:
        - name: assignmentId
          in: path
          required: true
          description: The ID of the assignment
          schema:
            type: integer
      responses:
        '200':
          description: Assignment progress retrieved successfully
          content:
            application/json:
              schema:
                type: number
                min: 0
                max: 100
        '401':
          description: Unauthorized access
        '404':
          description: Assignment not found

  /progress/student/learningPath/{learningPathId}:
    get:
      tags:
        - Progress
        - Student
      summary: Get student progress for a learning path
      description: Retrieve the progress of a student for a specific learning path. Requires student authentication.
      parameters:
        - name: learningPathId
          in: path
          required: true
          description: The ID of the learning path
          schema:
            type: string
      responses:
        '200':
          description: Learning path progress retrieved successfully
          content:
            application/json:
              schema:
                type: number
                min: 0
                max: 100
        '401':
          description: Unauthorized access
        '404':
          description: Learning path not found

  /progress/teacher/team/{teamId}:
    get:
      tags:
        - Progress
        - Teacher
      summary: Get team progress for a teacher
      description: Retrieve the progress of a team for a specific assignment. Requires teacher authentication.
      parameters:
        - name: teamId
          in: path
          required: true
          description: The ID of the team
          schema:
            type: integer
      responses:
        '200':
          description: Team progress retrieved successfully
          content:
            application/json:
              schema:
                type: number
                min: 0
                max: 100
        '401':
          description: Unauthorized access
        '404':
          description: Team not found

  /progress/teacher/assignment/{assignmentId}/average:
    get:
      tags:
        - Progress
        - Teacher
      summary: Get average progress for an assignment
      description: Calculate the average progress of a class for a specific assignment. Requires teacher authentication.
      parameters:
        - name: assignmentId
          in: path
          required: true
          description: The ID of the assignment
          schema:
            type: integer
      responses:
        '200':
          description: Average progress retrieved successfully
          content:
            application/json:
              schema:
                type: number
                min: 0
                max: 100
        '401':
          description: Unauthorized access
        '404':
          description: Assignment not found

  # Submission routes
  /submission/student/assignment/{assignmentId}:
    get:
      tags:
        - Submission
        - Student
      summary: Get all submissions for a specific assignment
      description: Retrieve all submissions of the student and their team for a specific assignment. Requires student authentication.
      parameters:
        - name: assignmentId
          in: path
          required: true
          description: The ID of the assignment
          schema:
            type: integer
      responses:
        '200':
          description: Submissions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Submission'
        '401':
          description: Unauthorized access
        '404':
          description: Assignment not found

  /submission/student/assignment/{assignmentId}/evaluation/{evaluationId}:
    post:
      tags:
        - Submission
        - Student
      summary: Create a submission for a specific evaluation
      description: Allows a student to create a submission for a specific evaluation in an assignment. Requires student authentication.
      parameters:
        - name: assignmentId
          in: path
          required: true
          description: The ID of the assignment
          schema:
            type: integer
        - name: evaluationId
          in: path
          required: true
          description: The ID of the evaluation
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fileUrl:
                  type: string
                  description: The URL of the submitted file
                description:
                  type: string
                  description: A description of the submission
      responses:
        '201':
          description: Submission created successfully
        '401':
          description: Unauthorized access
        '400':
          description: Invalid request body

    get:
      tags:
        - Submission
        - Student
      summary: Get all submissions for a specific evaluation
      description: Retrieve all submissions of the student and their team for a specific evaluation in an assignment. Requires student authentication.
      parameters:
        - name: assignmentId
          in: path
          required: true
          description: The ID of the assignment
          schema:
            type: integer
        - name: evaluationId
          in: path
          required: true
          description: The ID of the evaluation
          schema:
            type: string
      responses:
        '200':
          description: Submissions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Submission'
        '401':
          description: Unauthorized access
        '404':
          description: Evaluation not found

  /submission/teacher/student/{studentId}:
    get:
      tags:
        - Submission
        - Teacher
      summary: Get all submissions of a student
      description: Retrieve all submissions made by a specific student. Requires teacher authentication.
      parameters:
        - name: studentId
          in: path
          required: true
          description: The ID of the student
          schema:
            type: integer
      responses:
        '200':
          description: Submissions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Submission'
        '401':
          description: Unauthorized access
        '404':
          description: Student not found

  /submission/teacher/team/{teamId}:
    get:
      tags:
        - Submission
        - Teacher
      summary: Get all submissions of a team
      description: Retrieve all submissions made by a specific team. Requires teacher authentication.
      parameters:
        - name: teamId
          in: path
          required: true
          description: The ID of the team
          schema:
            type: integer
      responses:
        '200':
          description: Submissions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Submission'
        '401':
          description: Unauthorized access
        '404':
          description: Team not found

  /submission/teacher/assignment/{assignmentId}/team/{teamId}:
    get:
      tags:
        - Submission
        - Teacher
      summary: Get all submissions of a team for a specific assignment
      description: Retrieve all submissions made by a specific team for a specific assignment. Requires teacher authentication.
      parameters:
        - name: assignmentId
          in: path
          required: true
          description: The ID of the assignment
          schema:
            type: integer
        - name: teamId
          in: path
          required: true
          description: The ID of the team
          schema:
            type: integer
      responses:
        '200':
          description: Submissions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Submission'
        '401':
          description: Unauthorized access
        '404':
          description: Assignment or team not found

components:
  schemas:
    Feedback:
      type: object
      properties:
        submissionId:
          type: integer
          description: The ID of the submission the feedback is for.
        teacherId:
          type: integer
          description: The ID of the teacher providing the feedback.
        description:
          type: string
          description: The feedback provided.

    Question:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the question.
        teamId:
          type: integer
          description: The ID of the team that asked the question.
        title:
          type: string
          description: The title of the question.
        assignmentId:
          type: integer
          description: The ID of the assignment the question is linked to.
        type:
          type: string
          enum:
            - general
            - specific
          description: The type of question. General questions are linked to learning paths. Specific questions are linked to learning objects.
        createdAt:
          type: string
          format: date-time
          description: The date and time the question was created.
        updatedAt:
          type: string
          format: date-time
          description: The date and time the question was last updated.
        questionConversation:
          type: array
          items:
            $ref: "#/components/schemas/QuestionMessage"

    QuestionMessage:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the message.
        questionId:
          type: integer
          description: The ID of the question the message is linked to.
        userId:
          type: integer
          description: The ID of the user who posted the message.
        text:
          type: string
          description: The content of the message.
        createdAt:
          type: string
          format: date-time
          description: The date and time the message was created.
        updatedAt:
          type: string
          format: date-time
          description: The date and time the message was last updated.

    Assignment:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the assignment.
        pathRef:
          type: string
          description: The reference to the learning path.
        isExternal:
          type: boolean
          description: Whether the assignment needs to be fetched from Dwengo API or not.
        deadline:
          type: string
          format: date-time
          description: The deadline for the assignment.
        createdAt:
          type: string
          format: date-time
          description: The date and time the assignment was created.
        updatedAt:
          type: string
          format: date-time
          description: The date and time the assignment was last updated.
        questions:
          type: array
          items:
            $ref: "#/components/schemas/Question"
        classAssignemnts:
          type: array
          items:
            $ref: "#/components/schemas/ClassAssignment"
        teamAssignments:
          type: array
          items:
            $ref: "#/components/schemas/TeamAssignment"
        submissions:
          type: array
          items:
            $ref: "#/components/schemas/Submission"

    ClassAssignment:
      type: object
      properties:
        classId:
          type: integer
          description: The ID of the class the assignment is linked to.
        assignmentId: 
          type: integer
          description: The ID of the assignment.

    TeamAssignment:
      type: object
      properties:
        teamId:
          type: integer
          description: The ID of the team the assignment is linked to.
        assignmentId: 
          type: integer
          description: The ID of the assignment.

    Submission:
      type: object
      properties:
        submissionId:
          type: integer
          description: The ID of the submission.
        assignmentId:
          type: integer
          description: The ID of the assignment the submission is linked to.
        evaluationId:
          type: string
          description: The ID of the evaluation the submission is linked to.
        teamId:
          type: integer
          description: The ID of the team that made the submission.
        submitted:
          type: string,
          format: date-time
          description: The date and time the submission was made.
        feedback:
          $ref: "#/components/schemas/Feedback"

    LearningObjectProgress:
      type: object
      properties:
        id: 
          type: integer
          description: The ID of the progress entry.
        learningObjectId:
          type: string
          description: The ID of the learning object.
        done:
          type: boolean
          description: Whether the learning object is completed or not.
        studentProgress:
          type: array
          items:
            $ref: "#/components/schemas/StudentProgress"
    
    StudentProgress:
      type: object
      properties:
        studentId: 
          type: integer
          description: The ID of the student.
        progressId: 
          type: integer
          description: The ID of the progress entry.
        progress:
          $ref: "#/components/schemas/LearningObjectProgress"

    LearningPath:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the learning path.
        hruid:
          type: string
          description: The human-readable ID of the learning path.
        title:
          type: string
          description: The title of the learning path.
        language:
          type: string
          description: The language of the learning path.
        description:
          type: string
          description: The description of the learning path.
        image:
          type: string
          format: byte
          description: The image associated with the learning path.
        num_nodes:
          type: integer
          description: The number of nodes in the learning path.
        num_nodes_left:
          type: integer
          description: The number of nodes left to complete the learning path.
        nodes:
          type: array
          items:
            $ref: "#/components/schemas/Node"
        createdAt:
          type: string
          format: date-time
          description: The date and time the learning path was created.
        updatedAt:
          type: string
          format: date-time
          description: The date and time the learning path was last updated.

    Node:
      type: object
      properties:
        nodeId:
          type: string
          description: The ID of the node.
        learningPathId:
          type: string
          description: The ID of the learning path the node is linked to.
        localLearningObjectId:
          type: string
          description: The ID of the local learning object the node is representing (could be empty).
        dwengoHruid:
          type: string
          description: The human-readable ID of the learning object in Dwengo.
        dwengoLanguage:
          type: string
          description: The language of the learning object in Dwengo.
        dwengoVersion:
          type: integer
          description: The version of the learning object in Dwengo.
        isExternal:
          type: boolean
          description: Whether the learning object the node is representing is external or not.
        start_node:
          type: boolean
          description: Whether the node is a start node or not.
        createdAt:
          type: string
          format: date-time
          description: The date and time the node was created.
        updatedAt:
          type: string
          format: date-time
          description: The date and time the node was last updated.
        transitions:
          type: array
          description: The node has transitions to other nodes.
          items:
            $ref: "#/components/schemas/Transition"
        nextTransitions:
          type: array
          description: The transitions from this node to other nodes.
          items:
            $ref: "#/components/schemas/Transition"

    Transition:
      type: object
      properties:
        transitionId:
          type: string
          format: uuid
          description: The ID of the transition.
        default:
          type: boolean
          description: Whether the transition is a default transition or not.
        condition:
          type: string
          description: The condition for the transition.
        nodeId:
          type: string
          description: The ID of the node the transition is linked to.
        node: 
          $ref: "#/components/schemas/Node"
        nextNodeId:
          type: string
          description: The ID of the next node the transition is linked to.
        nextNode:
          $ref: "#/components/schemas/Node"

    LearningObject:
      type: object
      properties:
        id:
          type: string
          description: The ID of the learning object.
        uuid:
          type: string
          format: uuid
          description: The UUID of the learning object.
        hruid:
          type: string
          description: The human-readable ID of the learning object.
        version:
          type: integer
          description: The version of the learning object.
        language:
          type: string
          description: The language of the learning object.
        title:
          type: string
          description: The title of the learning object.
        description:
          type: string
          description: The description of the learning object.
        contentType:
          type: string
          description: The content type of the learning object.
          enum:
            - text/plain
            - text/markdown
            - image/image-block
            - image/image
            - audio/mpeg
            - video
            - evaluation/multiple-choice
            - evaluation/open-question
        keywords:
          type: array
          items:
            type: string
          description: The keywords associated with the learning object.
        targetAges:
          type: array
          items:
            type: number
          description: The target ages for the learning object.
        teacherExclusive:
          type: boolean
          description: Whether the learning object is exclusive to teachers or not.
        skosConcepts:
          type: array
          items:
            type: string
          description: The SKOS concepts associated with the learning object.
        copyright:
          type: string
          description: The copyright information for the learning object.
        licence:
          type: string
          description: The license information for the learning object.
        difficulty:
          type: integer
          description: The difficulty level of the learning object.
        estimatedTime:
          type: integer
          description: The estimated time in minutes to complete the learning object.
        available:
          type: boolean
          description: Whether the learning object is available or not.
        contentLocation:
          type: string
          description: The external location of the content of the learning object (optional).
        origin:
          type: string
          description: The origin of the learning object. Has the teacher made it itself or was this fetched from the Dwengo API?
          enum:
            - dwengo
            - local
        createdAt:
          type: string
          format: date-time
          description: The date and time the learning object was created.
        updatedAt:
          type: string
          format: date-time
          description: The date and time the learning object was last updated.
          
    TeamMember:
      type: object
      properties:
        userId: 
          type: integer
          description: The ID of the user.
        email:
          type: string
          format: email
          description: The email of the user.
        firstName:
          type: string
          description: The first name of the user.
        lastName:
          type: string
          description: The last name of the user.

    Team:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the team.
        teamname: 
          type: string
          description: The name of the team.
        classId:
          type: integer
          description: The ID of the class the team is linked to.
        students:
          type: array
          items:
            $ref: "#/components/schemas/Student"
        TeamAssignment:
          $ref: "#/components/schemas/TeamAssignment"
        class:
          $ref: "#/components/schemas/Class"
        submissions:
          type: array
          items:
            $ref: "#/components/schemas/Submission"
        Questions:
          type: array
          items:
            $ref: "#/components/schemas/Question" 

    Class:
      type: object
      properties: 
        id:
          type: integer
          description: The ID of the class.
        name: 
          type: string
          description: The name of the class.
        code: 
          type: string
          description: The unique code of the class.
        createdAt:
          type: string
          format: date-time
          description: The date and time the class was created.
        updatedAt:
          type: string
          format: date-time
          description: The date and time the class was last updated.
        classLinks:
          type: array
          items:
            $ref: "#/components/schemas/ClassStudent"
        joinRequests: 
          type: array
          items:
            $ref: "#/components/schemas/JoinRequest"
        assignments:
          type: array
          items:
            $ref: "#/components/schemas/ClassAssignment"
        Invite:
          $ref: "#/components/schemas/Invite"
        ClassTeacher:
          $ref: "#/components/schemas/ClassTeacher"
        teams: 
          type: array
          items:
            $ref: "#/components/schemas/Team"

    Student:
      type: object
      properties:
        userId:
          type: integer
          description: The ID of the user.
        user:
          $ref: "#/components/schemas/User"
        progress:
          type: array
          items:
            $ref: "#/components/schemas/StudentProgress"
        classes:
          type: array
          items:
            $ref: "#/components/schemas/ClassStudent"
        Team:
          $ref: "#/components/schemas/Team"
      
    User:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the user.
        email:
          type: string
          format: email
          description: The email of the user.
        firstName:
          type: string
          description: The first name of the user.
        lastName:
          type: string
          description: The last name of the user.
        password:
          type: string
          format: password
          description: The password of the user.
        role:
          type: string
          enum:
            - student
            - teacher
            - admin
          description: The role of the user.
        createdAt:
          type: string
          format: date-time
          description: The date and time the user was created.
        updatedAt:
          type: string
          format: date-time
          description: The date and time the user was last updated.
        admin:
          $ref: "#/components/schemas/Admin"
        teacher:
          $ref: "#/components/schemas/Teacher"
        student:
          $ref: "#/components/schemas/Student"

    Admin:
      type: object
      properties:
        userId:
          type: integer
          description: The ID of the user.
        user:
          $ref: "#/components/schemas/User"

    Teacher:
      userId: 
        type: integer
        description: The ID of the user.
      user:
        $ref: "#/components/schemas/User"
      teacherFeedbacks:
        type: array
        items:
          $ref: "#/components/schemas/Feedback"
      invite:
        type: array
        items:
          $ref: "#/components/schemas/Invite"
      createdLearningPaths:
        type: array
        items:
          $ref: "#/components/schemas/LearningPath"
      createdLearningObjects:
        type: array
        items:
          $ref: "#/components/schemas/LearningObject"
      teaches:
        type: array
        items:
          $ref: "#/components/schemas/ClassTeacher"

    ClassTeacher:
      type: object
      properties:
        teacherId:
          type: integer
          description: The ID of the teacher.
        classId:
          type: integer
          description: The ID of the class.
        teacher: 
          $ref: "#/components/schemas/Teacher"
        class:
          $ref: "#/components/schemas/Class"
        invites:
          type: array
          items:
            $ref: "#/components/schemas/Invite"

    ClassStudent:
      type: object
      properties:
        studentId:
          type: integer
          description: The ID of the student.
        classId:
          type: integer
          description: The ID of the class.
        student:
          $ref: "#/components/schemas/Student"
        class:
          $ref: "#/components/schemas/Class"
              
    JoinRequest:
      type: object
      properties:
        requestId:
          type: integer
          description: The ID of the join request.
        studentId:
          type: integer
          description: The ID of the student.
        classId:
          type: integer
          description: The ID of the class.
        status:
          type: string
          enum:
            - pending
            - approved
            - denied
          description: The status of the join request.
        student:
          $ref: "#/components/schemas/Student"
        class:
          $ref: "#/components/schemas/Class"
        
    Invite:
      type: object
      properties:
        inviteId:
          type: integer
          description: The ID of the invite.
        otherTeacherId:
          type: integer
          description: The ID of the other teacher.
        classTeacherId:
          type: integer
          description: The ID of the class teacher.
        classId:
          type: integer
          description: The ID of the class.
        status:
          type: string
          enum:
            - pending
            - approved
            - denied
          description: The status of the invite.
        otherTeacher:
          $ref: "#/components/schemas/Teacher"
        classTeacher:
          $ref: "#/components/schemas/ClassTeacher"
        class: 
          $ref: "#/components/schemas/Class"
    
    SelfmadeLearningObject:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the selfmade learning object.
        title:
          type: string
          description: The title of the learning object.
        description:
          type: string
          description: The description of the learning object.
        contentType:
          type: string
          description: The content type of the learning object (e.g., "text/markdown", "interactive/quiz").
        keywords:
          type: array
          items:
            type: string
          description: Keywords associated with the learning object (comma-separated or JSON).
        targetAges:
          type: array
          items:
            type: integer
          description: Target age groups for the learning object (comma-separated or JSON).
        teacherExclusive:
          type: boolean
          description: Whether the learning object is exclusive to teachers.
        skosConcepts:
          type: array
          items:
            type: string
          description: SKOS concepts associated with the learning object.
        copyright:
          type: string
          description: Copyright information for the learning object.
        licence:
          type: string
          description: The licence under which the learning object is distributed.
        difficulty:
          type: integer
          description: The difficulty level of the learning object.
        estimatedTime:
          type: integer
          description: The estimated time to complete the learning object (in minutes).
        available:
          type: boolean
          description: Whether the learning object is available.
        contentLocation:
          type: string
          description: The location of the content (e.g., URL or file path).
        createdAt:
          type: string
          format: date-time
          description: The date and time the learning object was created.
        updatedAt:
          type: string
          format: date-time
          description: The date and time the learning object was last updated.

    NodeMetadata:
      type: object
      properties:
        isExternal:
          type: boolean
          description: Whether this node is linked to an external (Dwengo) learning object.
        localLearningObjectId:
          type: string
          nullable: true
          description: The ID of the local learning object associated with this node (if applicable).
        dwengoHruid:
          type: string
          nullable: true
          description: The human-readable ID of the Dwengo learning object (if applicable).
        dwengoLanguage:
          type: string
          nullable: true
          description: The language of the Dwengo learning object (if applicable).
        dwengoVersion:
          type: integer
          nullable: true
          description: The version of the Dwengo learning object (if applicable).
        start_node:
          type: boolean
          nullable: true
          description: Whether this node is the starting node of the learning path.
      required:
        - isExternal

    PathMetadata:
      type: object
      properties:
        title: 
          type: string
          description: The title of the learning path.
        language: 
          type: string
          description: The language of the learning path.
        description:
          type: string
          description: The description of the learning path.
        image:
          type: string
          format: byte
          description: The image associated with the learning path.
          nullable: true
      required:
        - title
        - language
        
    OptionalPathMetaData:
      type: object
      properties:
        title: 
          type: string
          description: The title of the learning path.
        language: 
          type: string
          description: The language of the learning path.
        description:
          type: string
          description: The description of the learning path.
        image:
          type: string
          format: byte
          description: The image associated with the learning path.
          nullable: true