openapi: 3.0.0
info:
  title: Learning Platform API
  version: "1.0"
servers:
  - url: http://localhost:5000

tags:
  - name: Question
    description: Everything about questions
  - name: Assignment
    description: Everything about assignments
  - name: Authentication
    description: Everything about authentication
  - name: Learning object
    description: Everything about learning objects
  - name: Selfmade learning object
    description: Everything about learning objects created by teachers
  - name: Learning path
    description: Everything about learning paths
  - name: Selfmade learning path
    description: Everything about learning paths created by teachers
  - name: Class
    description: Everything about classes
  - name: Invite
    description: Everything about invitations
  - name: Join request
    description: Everything about join requests
  - name: Feedback
    description: Everything about feedback
  - name: Submission
    description: Everything about submissions
  - name: Student
    description: Routes only accessible for students
  - name: Teacher
    description: Routes only accessible for teachers
  - name: User
    description: Routes accessible for all users

paths:
  /auth:
    $ref: "./routes/authentication/authenticationRoutes.yaml"
  /class:
    $ref: "./routes/class/classRoutes.yaml"
  /invite:
    $ref: "./routes/invite/inviteRoutes.yaml"
  /join-request:
    $ref: "./routes/joinRequest/joinRequestRoutes.yaml"
  /pathByTeacher:
    $ref: "./routes/teacherMadeLearningPath/pathByTeacherRoutes.yaml"
  /learningPath/:learningPathId/node:
    $ref: "./routes/teacherMadeLearningPath/learningPathNodeRoutes.yaml"
  /learningObjectByTeacher:
    $ref: "./routes/teacherMadeLearningObject/learningObjectByTeacherRoutes.yaml"
  /team:
    $ref: "./routes/team/teamRoutes.yaml"
  /assignment/{assignmentId}:
    get:
      tags:
        - Assignment
        - User
      summary: Get an assignment by ID
      description: Retrieve an assignment by its ID. Access is allowed for anyone, but it should be checked if the user is a teacher of the class or a student of the class.
      parameters:
        - name: assignmentId
          in: path
          required: true
          description: The ID of the assignment
          schema:
            type: integer
      responses:
        '200':
          description: Assignment retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assignment'
        '404':
          description: Assignment not found
        '403':
          description: Unauthorized access

  /assignment/student:
    get:
      tags:
        - Assignment
        - Student
      summary: Get all assignments for a student
      description: Retrieve all assignments available for a student. Requires student authentication.
      parameters:
        - name: sort
          in: query
          required: false
          description: Sort order (asc or desc)
          schema:
            type: string
            enum: [asc, desc]
        - name: order
          in: query
          required: false
          description: Field to order by (createdAt, updatedAt, or deadline)
          schema:
            type: string
            enum: [createdAt, updatedAt, deadline]
        - name: limit
          in: query
          required: false
          description: Limit the number of assignments returned
          schema:
            type: integer
      responses:
        '200':
          description: A list of assignments for the student
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Assignment'
        '401':
          description: Unauthorized access

  /assignment/teacher:
    get:
      tags:
        - Assignment
        - Teacher
      summary: Get all assignments created by the teacher
      description: Retrieve all assignments that the teacher has created. Requires teacher authentication.
      responses:
        '200':
          description: A list of assignments created by the teacher
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Assignment'
        '401':
          description: Unauthorized access

    post:
      tags:
        - Assignment
        - Teacher
      summary: Create an assignment for a class
      description: Allows a teacher to create an assignment for a class. Requires teacher authentication.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                classId:
                  type: integer
                  description: The ID of the class
                pathRef:
                  type: string
                  description: The reference to the learning path
                pathLanguage:
                  type: string
                  description: The language of the learning path
                isExternal:
                  type: boolean
                  description: Whether the assignment is external
                deadline:
                  type: string
                  format: date-time
                  description: The deadline for the assignment
      responses:
        '201':
          description: Assignment created successfully
        '401':
          description: Unauthorized access
        '400':
          description: Invalid request body

  /assignment/teacher/class/{classId}:
    get:
      tags:
        - Assignment
        - Teacher
      summary: Get all assignments for a class
      description: Retrieve all assignments for a specific class. Requires teacher authentication.
      parameters:
        - name: classId
          in: path
          required: true
          description: The ID of the class
          schema:
            type: integer
      responses:
        '200':
          description: A list of assignments for the class
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Assignment'
        '401':
          description: Unauthorized access
        '404':
          description: Class not found

  /assignment/teacher/{assignmentId}:
    patch:
      tags:
        - Assignment
        - Teacher
      summary: Update an assignment
      description: Allows a teacher to update an assignment. Requires teacher authentication.
      parameters:
        - name: assignmentId
          in: path
          required: true
          description: The ID of the assignment
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pathRef:
                  type: string
                  description: The reference to the learning path
                pathLanguage:
                  type: string
                  description: The language of the learning path
                isExternal:
                  type: boolean
                  description: Whether the assignment is external
                deadline:
                  type: string
                  format: date-time
                  description: The deadline for the assignment
      responses:
        '200':
          description: Assignment updated successfully
        '401':
          description: Unauthorized access
        '404':
          description: Assignment not found

    delete:
      tags:
        - Assignment
        - Teacher
      summary: Delete an assignment
      description: Allows a teacher to delete an assignment. Requires teacher authentication.
      parameters:
        - name: assignmentId
          in: path
          required: true
          description: The ID of the assignment
          schema:
            type: integer
      responses:
        '204':
          description: Assignment deleted successfully
        '401':
          description: Unauthorized access
        '404':
          description: Assignment not found
  /feedback:
    post:
      tags:
        - Feedback
        - Teacher
      summary: Create feedback for a submission
      description: Create new feedback for a specific submission. Requires teacher authentication.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                submissionId:
                  type: integer
                  description: The ID of the submission
                description:
                  type: string
                  description: The feedback description
      responses:
        "201":
          description: Feedback created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feedback"
        "401":
          description: Unauthorized access
        "400":
          description: Invalid request body

  /feedback/submission/{submissionId}:
    get:
      tags:
        - Feedback
        - Teacher
      summary: Get feedback for a submission
      description: Retrieve feedback associated with a specific submission. Requires teacher authentication.
      parameters:
        - name: submissionId
          in: path
          required: true
          description: The ID of the submission
          schema:
            type: integer
      responses:
        "200":
          description: Feedback for the submission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feedback"
        "401":
          description: Unauthorized access
        "404":
          description: Submission not found

    patch:
      tags:
        - Feedback
        - Teacher
      summary: Update feedback for a submission
      description: Update the feedback associated with a specific submission. Requires teacher authentication.
      parameters:
        - name: submissionId
          in: path
          required: true
          description: The ID of the submission
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  description: The updated feedback description
      responses:
        "200":
          description: Feedback updated successfully
        "401":
          description: Unauthorized access
        "404":
          description: Submission not found

    delete:
      tags:
        - Feedback
        - Teacher
      summary: Delete feedback for a submission
      description: Delete the feedback associated with a specific submission. Requires teacher authentication.
      parameters:
        - name: submissionId
          in: path
          required: true
          description: The ID of the submission
          schema:
            type: integer
      responses:
        "204":
          description: Feedback deleted successfully
        "401":
          description: Unauthorized access
        "404":
          description: Submission not found

  /feedback/assignment/{assignmentId}/evaluation/{evaluationId}:
    get:
      tags:
        - Feedback
        - Teacher
      summary: Get all feedback for an evaluation
      description: Retrieve all feedback associated with a specific evaluation for an assignment. Requires teacher authentication.
      parameters:
        - name: assignmentId
          in: path
          required: true
          description: The ID of the assignment
          schema:
            type: integer
        - name: evaluationId
          in: path
          required: true
          description: The ID of the evaluation
          schema:
            type: string
      responses:
        "200":
          description: A list of feedback for the evaluation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Feedback"
        "401":
          description: Unauthorized access
        "404":
          description: Evaluation not found

  /learningObject:
    $ref: "./routes/learningObject/learningObjectRoutes.yaml"
  /learningPath:
    $ref: "./routes/learningPath/learningPathRoutes.yaml"
  /question/{questionId}:
    get:
      tags:
        - Question
        - User
      summary: Get a specific question
      description: Allows authorized users to retrieve a specific question.
      parameters:
        - name: questionId
          in: path
          required: true
          description: The ID of the question
          schema:
            type: integer
      responses:
        "200":
          description: Question retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Question"
        "401":
          description: Unauthorized access
        "403":
          description: Forbidden access

    patch:
      tags:
        - Question
        - User
      summary: Update a question
      description: Allows authorized users to update a specific question.
      parameters:
        - name: questionId
          in: path
          required: true
          description: The ID of the question
          schema:
            type: integer
      responses:
        "200":
          description: Question updated successfully
        "401":
          description: Unauthorized access
        "403":
          description: Forbidden access

    delete:
      tags:
        - Question
        - User
      summary: Delete a question
      description: Allows authorized users to delete a specific question.
      parameters:
        - name: questionId
          in: path
          required: true
          description: The ID of the question
          schema:
            type: integer
      responses:
        "204":
          description: Question deleted successfully
        "401":
          description: Unauthorized access
        "403":
          description: Forbidden access

  /question/{questionId}/message:
    post:
      tags:
        - Question
        - User
      summary: Create a message for a question
      description: Allows authorized users to create a message for a specific question.
      parameters:
        - name: questionId
          in: path
          required: true
          description: The ID of the question
          schema:
            type: integer
      responses:
        "201":
          description: Message created successfully
        "401":
          description: Unauthorized access
        "403":
          description: Forbidden access

  /question/{questionId}/message/{questionMessageId}:
    patch:
      tags:
        - Question
        - User
      summary: Update a message for a question
      description: Allows authorized users to update a specific message for a question.
      parameters:
        - name: questionId
          in: path
          required: true
          description: The ID of the question
          schema:
            type: integer
        - name: questionMessageId
          in: path
          required: true
          description: The ID of the question message
          schema:
            type: integer
      responses:
        "200":
          description: Message updated successfully
        "401":
          description: Unauthorized access
        "403":
          description: Forbidden access

    delete:
      tags:
        - Question
        - User
      summary: Delete a message for a question
      description: Allows authorized users to delete a specific message for a question.
      parameters:
        - name: questionId
          in: path
          required: true
          description: The ID of the question
          schema:
            type: integer
        - name: questionMessageId
          in: path
          required: true
          description: The ID of the question message
          schema:
            type: integer
      responses:
        "204":
          description: Message deleted successfully
        "401":
          description: Unauthorized access
        "403":
          description: Forbidden access

  /question/{questionId}/messages:
    get:
      tags:
        - Question
        - User
      summary: Get messages for a question
      description: Allows authorized users to retrieve all messages for a specific question.
      parameters:
        - name: questionId
          in: path
          required: true
          description: The ID of the question
          schema:
            type: integer
      responses:
        "200":
          description: Messages retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/QuestionMessage"
        "401":
          description: Unauthorized access
        "403":
          description: Forbidden access

  /question/team/{teamId}/:
    get:
      tags:
        - Question
        - User
      summary: Get questions for a team
      description: Allows authorized users to retrieve all questions for a specific team.
      parameters:
        - name: teamId
          in: path
          required: true
          description: The ID of the team
          schema:
            type: integer
      responses:
        "200":
          description: Questions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Question"
        "401":
          description: Unauthorized access
        "403":
          description: Forbidden access

  /question/class/{classId}:
    get:
      tags:
        - Question
        - User
      summary: Get questions for a class
      description: Allows authorized users to retrieve all questions for a specific class.
      parameters:
        - name: classId
          in: path
          required: true
          description: The ID of the class
          schema:
            type: integer
      responses:
        "200":
          description: Questions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Question"
        "401":
          description: Unauthorized access
        "403":
          description: Forbidden access

  /question/assignment/{assignmentId}/class/{classId}:
    get:
      tags:
        - Question
        - User
      summary: Get questions for an assignment in a class
      description: Allows authorized users to retrieve all questions for a specific assignment in a class.
      parameters:
        - name: assignmentId
          in: path
          required: true
          description: The ID of the assignment
          schema:
            type: integer
        - name: classId
          in: path
          required: true
          description: The ID of the class
          schema:
            type: integer
      responses:
        "200":
          description: Questions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Question"
        "401":
          description: Unauthorized access
        "403":
          description: Forbidden access

  /question/assignment/{assignmentId}/learningPath/{learningPathId}/:
    post:
      tags:
        - Question
        - User
      summary: Create a general question for an assignment
      description: Allows a student in a team with an assignment to create a general question.
      parameters:
        - name: assignmentId
          in: path
          required: true
          description: The ID of the assignment
          schema:
            type: integer
        - name: learningPathId
          in: path
          required: true
          description: The ID of the learning path
          schema:
            type: integer
      responses:
        "201":
          description: Question created successfully
        "401":
          description: Unauthorized access
        "403":
          description: Forbidden access

  /question/assignment/{assignmentId}/learningPath/{learningPathId}/learningObject/{learningObjectId}/:
    post:
      tags:
        - Question
        - User
      summary: Create a specific question for a learning object
      description: Allows a student in a team with an assignment to create a specific question for a learning object.
      parameters:
        - name: assignmentId
          in: path
          required: true
          description: The ID of the assignment
          schema:
            type: integer
        - name: learningPathId
          in: path
          required: true
          description: The ID of the learning path
          schema:
            type: integer
        - name: learningObjectId
          in: path
          required: true
          description: The ID of the learning object
          schema:
            type: integer
      responses:
        "201":
          description: Question created successfully
        "401":
          description: Unauthorized access
        "403":
          description: Forbidden access
  /progress:
    $ref: "./routes/progress/progressRoutes.yaml"

  # Submission routes
  /submission/student/assignment/{assignmentId}:
    get:
      tags:
        - Submission
        - Student
      summary: Get all submissions for a specific assignment
      description: Retrieve all submissions of the student and their team for a specific assignment. Requires student authentication.
      parameters:
        - name: assignmentId
          in: path
          required: true
          description: The ID of the assignment
          schema:
            type: integer
      responses:
        '200':
          description: Submissions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Submission'
        '401':
          description: Unauthorized access
        '404':
          description: Assignment not found

  /submission/student/assignment/{assignmentId}/evaluation/{evaluationId}:
    post:
      tags:
        - Submission
        - Student
      summary: Create a submission for a specific evaluation
      description: Allows a student to create a submission for a specific evaluation in an assignment. Requires student authentication.
      parameters:
        - name: assignmentId
          in: path
          required: true
          description: The ID of the assignment
          schema:
            type: integer
        - name: evaluationId
          in: path
          required: true
          description: The ID of the evaluation
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fileUrl:
                  type: string
                  description: The URL of the submitted file
                description:
                  type: string
                  description: A description of the submission
      responses:
        '201':
          description: Submission created successfully
        '401':
          description: Unauthorized access
        '400':
          description: Invalid request body

    get:
      tags:
        - Submission
        - Student
      summary: Get all submissions for a specific evaluation
      description: Retrieve all submissions of the student and their team for a specific evaluation in an assignment. Requires student authentication.
      parameters:
        - name: assignmentId
          in: path
          required: true
          description: The ID of the assignment
          schema:
            type: integer
        - name: evaluationId
          in: path
          required: true
          description: The ID of the evaluation
          schema:
            type: string
      responses:
        '200':
          description: Submissions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Submission'
        '401':
          description: Unauthorized access
        '404':
          description: Evaluation not found

  /submission/teacher/student/{studentId}:
    get:
      tags:
        - Submission
        - Teacher
      summary: Get all submissions of a student
      description: Retrieve all submissions made by a specific student. Requires teacher authentication.
      parameters:
        - name: studentId
          in: path
          required: true
          description: The ID of the student
          schema:
            type: integer
      responses:
        '200':
          description: Submissions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Submission'
        '401':
          description: Unauthorized access
        '404':
          description: Student not found

  /submission/teacher/team/{teamId}:
    get:
      tags:
        - Submission
        - Teacher
      summary: Get all submissions of a team
      description: Retrieve all submissions made by a specific team. Requires teacher authentication.
      parameters:
        - name: teamId
          in: path
          required: true
          description: The ID of the team
          schema:
            type: integer
      responses:
        '200':
          description: Submissions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Submission'
        '401':
          description: Unauthorized access
        '404':
          description: Team not found

  /submission/teacher/assignment/{assignmentId}/team/{teamId}:
    get:
      tags:
        - Submission
        - Teacher
      summary: Get all submissions of a team for a specific assignment
      description: Retrieve all submissions made by a specific team for a specific assignment. Requires teacher authentication.
      parameters:
        - name: assignmentId
          in: path
          required: true
          description: The ID of the assignment
          schema:
            type: integer
        - name: teamId
          in: path
          required: true
          description: The ID of the team
          schema:
            type: integer
      responses:
        '200':
          description: Submissions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Submission'
        '401':
          description: Unauthorized access
        '404':
          description: Assignment or team not found

components:
  schemas:
    Feedback:
      type: object
      properties:
        submissionId:
          type: integer
          description: The ID of the submission the feedback is for.
        teacherId:
          type: integer
          description: The ID of the teacher providing the feedback.
        description:
          type: string
          description: The feedback provided.

    Question:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the question.
        teamId:
          type: integer
          description: The ID of the team that asked the question.
        title:
          type: string
          description: The title of the question.
        assignmentId:
          type: integer
          description: The ID of the assignment the question is linked to.
        type:
          type: string
          enum:
            - general
            - specific
          description: The type of question. General questions are linked to learning paths. Specific questions are linked to learning objects.
        createdAt:
          type: string
          format: date-time
          description: The date and time the question was created.
        updatedAt:
          type: string
          format: date-time
          description: The date and time the question was last updated.
        questionConversation:
          type: array
          items:
            $ref: "#/components/schemas/QuestionMessage"

    QuestionMessage:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the message.
        questionId:
          type: integer
          description: The ID of the question the message is linked to.
        userId:
          type: integer
          description: The ID of the user who posted the message.
        text:
          type: string
          description: The content of the message.
        createdAt:
          type: string
          format: date-time
          description: The date and time the message was created.
        updatedAt:
          type: string
          format: date-time
          description: The date and time the message was last updated.

    Assignment:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the assignment.
        pathRef:
          type: string
          description: The reference to the learning path.
        isExternal:
          type: boolean
          description: Whether the assignment needs to be fetched from Dwengo API or not.
        deadline:
          type: string
          format: date-time
          description: The deadline for the assignment.
        createdAt:
          type: string
          format: date-time
          description: The date and time the assignment was created.
        updatedAt:
          type: string
          format: date-time
          description: The date and time the assignment was last updated.
        questions:
          type: array
          items:
            $ref: "#/components/schemas/Question"
        classAssignemnts:
          type: array
          items:
            $ref: "#/components/schemas/ClassAssignment"
        teamAssignments:
          type: array
          items:
            $ref: "#/components/schemas/TeamAssignment"
        submissions:
          type: array
          items:
            $ref: "#/components/schemas/Submission"

    ClassAssignment:
      type: object
      properties:
        classId:
          type: integer
          description: The ID of the class the assignment is linked to.
        assignmentId: 
          type: integer
          description: The ID of the assignment.

    TeamAssignment:
      type: object
      properties:
        teamId:
          type: integer
          description: The ID of the team the assignment is linked to.
        assignmentId: 
          type: integer
          description: The ID of the assignment.

    Submission:
      type: object
      properties:
        submissionId:
          type: integer
          description: The ID of the submission.
        assignmentId:
          type: integer
          description: The ID of the assignment the submission is linked to.
        evaluationId:
          type: string
          description: The ID of the evaluation the submission is linked to.
        teamId:
          type: integer
          description: The ID of the team that made the submission.
        submitted:
          type: string,
          format: date-time
          description: The date and time the submission was made.
        feedback:
          $ref: "#/components/schemas/Feedback"
